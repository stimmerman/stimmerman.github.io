{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"ccnp-service-provider-350-501-spcor-study-materials/","title":"CCNP Service Provider (350-501 SPCOR) study materials","text":"<p>The CCNP Service Provider v1.0 Learning Matrix for the 350-501 SPCOR training references a lot of Cisco Live presentations.</p> <p>Unfortunatly almost all links are broken at the time of writing this post. I've been able to find all except one of the presentations from all over the internet from a mix of AD infested presentation sharing sites.</p> <p>Here they are, straight up linked PDFs to save you from the waste of time:</p> <ul> <li>5G xHaul Transport Network - BRKSPG-2680 (2019)</li> <li>Advanced MVPN Deployment Models - BRKIPM-3017 (2015)</li> <li>Campus QoS Design - BRKCRS-2501 (2020)</li> <li>Cisco NFVI - BRKSPG-2002 (2018)</li> <li>Deploying MPLS Traffic Engineering - BRKMPL-2100 (2014)</li> <li>Deploying MPLS-based Layer 2 Virtual Private Networks - BRKMPL-2101 (2015)</li> <li>Designing MPLS-based IP VPNs - BRKMPL-2102 (2022)</li> <li>High Availability in the Access - BRKCRS-2650_3438 (2018)</li> <li>Intro to Segment Routing - BRKRST-2124 (2020)</li> <li>Introduction to Cisco IOS XR for Enterprise and Service Providers - BRKARC-1008 (2016)</li> <li>Introduction to MPLS - BRKMPL-1100 (2020)</li> <li>IPv4 Exhaustion NAT and Transition to IPv6 for Service Provider - BRKSPG-2602 (2020)</li> <li>ISIS Deployment in Modern Networks - BRKRST-2338 (2014)</li> <li>IWAN AVC/QoS Design - BRKRST-2043 (2016)</li> <li>Leveraging BGP FlowSpec to Protect your infrastructure - BRKSPG-3012 (2018)</li> <li>Openstack based Cloud with Cisco Infrastructure - BRKVIR-2601 (2015)</li> <li>OSPF Deployment in Modern Networks - BRKRST-2337 (2020)</li> <li>Redundancy Mechanisms for Carrier Ethernet Networks and Layer 2 VPN Services - BRKSPG-2611 (2012)</li> <li>Scaling BGP - BRKRST-3321 (2016)</li> <li>Securely Managing Your Networks With SNMPv3 - BRKNMS-2658 (2015)</li> <li>SR Automation using NSO - LTRMPL-2201 (2019)</li> <li>Troubleshooting BGP - BRKRST-3320 (2016)</li> <li>Troubleshooting BGP - BRKRST-3320 (2018)</li> </ul>","tags":["cisco","ccnp","350-501","spcor"]},{"location":"scp-files-to-and-from-cisco-asa/","title":"SCP files to and from Cisco ASA","text":"<p>I needed to copy some file over SSH to a Cisco ASA appliance, but ran in the SCP error on the bottom of the page which was not an easy to find solution.</p>","tags":["cisco","asa","scp"]},{"location":"scp-files-to-and-from-cisco-asa/#copy-a-file-to-the-asa","title":"Copy a file to the ASA","text":"<p>Replace or remove <code>disk0</code> with another directory if you need to. <pre><code>scp your-file-here.txt username@192.168.1.1:disk0:your-file-here.txt\n</code></pre></p>","tags":["cisco","asa","scp"]},{"location":"scp-files-to-and-from-cisco-asa/#copy-a-file-from-the-asa","title":"Copy a file from the ASA","text":"<p>Replace or remove <code>disk0</code> with another directory if you need to. <pre><code>scp username@192.168.1.1:disk0:your-file-here.txt ~/your-file-here.txt\n</code></pre></p> <p>Original SCP protocol</p> <p>If your SCP command fails with <pre><code>subsystem request failed on channel 0\nscp: Connection closed\n</code></pre> Then you need to run the SCP commands with the <code>-O</code> flag added. To force the use of the original SCP protocol instead of SFTP. <pre><code>scp -O your-file-here.txt username@192.168.1.1:disk0:your-file-here.txt\n</code></pre> From the linux man page:</p> <p>-O Use the legacy SCP protocol for file transfers instead of the SFTP protocol.  Forcing the use of the SCP protocol may be necessary for servers that do not implement SFTP, for backwards-compatibility for particular filename wildcard patterns and for expanding paths with a \u2018~\u2019 prefix for older SFTP servers.</p>","tags":["cisco","asa","scp"]},{"location":"pa-vm-on-esxi-interface-configured-but-down/","title":"PA-VM on ESXi 'interface configured but down'","text":"<p>When deploying a PA-VM (11.1.3) on ESXI (8.0U2) I ran into a problem where the management network was working, but all other interfaces showed up as: interface configured but down. </p> <p>TLDR: <code>set system setting dpdk-pkt-io off</code></p>","tags":["palo alto","dpdk","vmware"]},{"location":"pa-vm-on-esxi-interface-configured-but-down/#troubleshooting","title":"Troubleshooting","text":"<p>I checked:</p> <ul> <li>The mapping of the NICS as configured on the VM at the ESXI host and inside the PA-VM.</li> <li>Configured the interfaces from 'auto' to 'on' at the PA-VM.</li> <li>The NICS showed as up on the port groups on ESXI, the statistics even showed some packets.</li> </ul> <p>However, the interfaces stayed down in the PA-VM...</p> <p>Issueing <code>show interface all</code> on the CLI showed the interfaces as <code>ukn/ukn/down((autoneg))</code>:</p> <pre><code>admin@xxxx(active)&gt; show interface all\n\ntotal configured hardware interfaces: 3\n\nname         id    speed/duplex/state       mac address       \n----------------------------------------------------------------\nethernet1/1  16    ukn/ukn/down((autoneg))  00:50:56:97:28:83 \nethernet1/2  17    ukn/ukn/down((autoneg))  00:50:56:97:64:df \nethernet1/4  19    ukn/ukn/down((autoneg))  00:50:56:97:d8:25 \n\naggregation groups: 0\n\ntotal configured logical interfaces: 3\n\nname         id    vsys zone   forwarding  tag  address  \n----------------- ------------------------- ----------------\nethernet1/1  16    1           ha          0    10.158.255.0/31   \nethernet1/2  17    1           ha          0    10.158.255.2/31   \nethernet1/4  19    1           N/A         0    N/A               \n</code></pre> <p>Using <code>debug show vm-series interfaces all</code> showed all interfaces as assigned to the PA-VM. I noticed the difference between the driver being used for the <code>mgt</code> (working) and <code>Ethernetx/x</code> (broken) interfaces: <pre><code>admin@xxxx(active)&gt; debug show vm-series interfaces all \n\nInterface_name  Base-OS_port  Base-OS_MAC        PCI-ID        Driver\n mgt                eth0     00:50:56:97:d4:4c  0000:03:00.0     vmxnet3\n Ethernet1/1        eth1     00:50:56:97:28:83  0000:0b:00.0  net_vmxnet3\n Ethernet1/2        eth2     00:50:56:97:64:df  0000:13:00.0  net_vmxnet3\n Ethernet1/3        eth3     00:50:56:97:7e:25  0000:1b:00.0  net_vmxnet3\n Ethernet1/4        eth4     00:50:56:97:d8:25  0000:04:00.0  net_vmxnet3\n Ethernet1/5        eth5     00:50:56:97:c9:ca  0000:0c:00.0  net_vmxnet3\n Ethernet1/6        eth6     00:50:56:97:04:c7  0000:14:00.0  net_vmxnet3\n Ethernet1/7        eth7     00:50:56:97:e6:2f  0000:1c:00.0  net_vmxnet3\n Ethernet1/8        eth8     00:50:56:97:75:0b  0000:05:00.0  net_vmxnet3\n Ethernet1/9        eth9     00:50:56:97:72:9b  0000:0d:00.0  net_vmxnet3\n</code></pre></p>","tags":["palo alto","dpdk","vmware"]},{"location":"pa-vm-on-esxi-interface-configured-but-down/#packetmmap-and-dpdk","title":"PacketMMAP and DPDK","text":"<p>After a while I started checking the compatibility matrixes, and stumbled on the PacketMMAP and DPDK Drivers on VM-Series Firewalls page. </p> <p>By default DPDK is enabled on VM-Series firewalls as stated below. If the VM-Series firewall detects an unsupported driver, the firewall reverts to PacketMMap mode.</p> <p>You can check the status of the packet IO mode on the PA-VM with: <code>show system setting dpdk-pkt-io</code></p> <pre><code>admin@xxxx&gt; show system setting dpdk-pkt-io\n\nDevice current Packet IO mode:                 DPDK\nDevice DPDK Packet IO capable:                 yes\nDevice default Packet IO mode:                 DPDK\n</code></pre>","tags":["palo alto","dpdk","vmware"]},{"location":"pa-vm-on-esxi-interface-configured-but-down/#solution","title":"Solution","text":"<p>In my case DPDK was not supported, but the PA-VM somehow did not revert to PacketMMap mode. Using <code>set system setting dpdk-pkt-io off</code> followed by a reboot forced the PA-VM to use PacketMMap mode:</p> <pre><code>admin@xxxx(active)&gt; set system setting dpdk-pkt-io off\nWarning: Enabling/disabling DPDK Packet IO mode will reboot the device. Do you want to continue? (y or n) \n\nBroadcast message from root (console) (Fri Jun 14 01:16:12 2024):\n\nThe system is going down for reboot NOW!\n\nDevice is now in non-DPDK IO mode, rebooting device\n</code></pre> <p>And tadaa, my interfaces were up and finally working:</p> <pre><code>admin@nlcm1m1-fwl001&gt; show interface all\n\ntotal configured hardware interfaces: 4\n\nname         id  speed/duplex/state  mac address\n-------------------------------------------------------\nethernet1/1  16  10000/full/up       00:50:56:97:28:83 \nethernet1/2  17  10000/full/up       00:50:56:97:64:df \nethernet1/3  18  10000/full/up       00:50:56:97:7e:25 \nethernet1/4  19  10000/full/up       00:50:56:97:d8:25 \n\naggregation groups: 0\n\ntotal configured logical interfaces: 7\n\nname             id    vsys zone  forwarding   tag    address\n--------------------- ------------------------- ------------------\nethernet1/1      16    1          ha           0      10.158.255.0/31\nethernet1/2      17    1          ha           0      10.158.255.2/31\nethernet1/3      18    1          N/A          0      N/A            \nethernet1/4      19    1          N/A          0      N/A            \nethernet1/4.103  258   1          vr:default   103    N/A            \nethernet1/4.105  256   1          vr:default   105    N/A            \nethernet1/4.106  257   1          vr:default   106    10.158.33.1/24 \n</code></pre>","tags":["palo alto","dpdk","vmware"]},{"location":"running-vyos-as-docker-container/","title":"Running VyOS as docker container","text":"<p>I recently started to use Containerlab and wanted to build a lab using VyOS routers. I searched a bit on the topic and found some scattered resources describing the process <sup>1</sup><sup>2</sup><sup>3</sup>. This post is combining and adding to that information.</p> <p>Prerequisites and versions</p> <p>This post assumes you have docker, git, squashfs-tools installed on your machine.</p>","tags":["containerlab","docker","vyos"]},{"location":"running-vyos-as-docker-container/#building-lts-and-rolling-release-isos","title":"Building LTS and rolling release ISO's","text":"<p>First build both the LTS and rolling ISO's from which the containers will be created. Create a directory for the build and execute the commands for one or both releases: <pre><code>mkdir vyos-builds &amp;&amp; cd vyos-builds\n</code></pre></p> LTS (1.3.4)Rolling (1.4.x) <pre><code>git clone -b equuleus --single-branch https://github.com/vyos/vyos-build vyos-lts\ndocker run --rm -it --privileged -v $(pwd)/vyos-lts:/vyos -w /vyos vyos/vyos-build:equuleus bash\n./configure --architecture amd64 --build-by \"red9-homelab\" --build-type release --version 1.3.4\nsudo make iso\nexit\n</code></pre> <pre><code>git clone -b sagitta --single-branch https://github.com/vyos/vyos-build vyos-rolling\ndocker run --rm -it --privileged -v $(pwd)/vyos-rolling:/vyos -w /vyos vyos/vyos-build:sagitta bash\nsudo make clean\nsudo ./build-vyos-image iso --architecture amd64 --build-by \"red9-homelab\"\nexit\n</code></pre>","tags":["containerlab","docker","vyos"]},{"location":"running-vyos-as-docker-container/#building-the-containers","title":"Building the containers","text":"<p>When the build process is completed we can mount the ISO's and create the containers from it</p> LTS (1.3.4)Rolling (1.4.x) <pre><code>mkdir lts-rootfs\nsudo mount -o loop vyos-lts/build/vyos-1.3.4-amd64.iso lts-rootfs\nmkdir lts-unsquashfs\nsudo unsquashfs -f -d lts-unsquashfs/ lts-rootfs/live/filesystem.squashfs\n# Fix locale\nsudo sed -i 's/^LANG=.*$/LANG=C.UTF-8/' lts-unsquashfs/etc/default/locale\n# Reducing the container size\nsudo rm -rf lts-unsquashfs/boot/*.img\nsudo rm -rf lts-unsquashfs/boot/*vyos*\nsudo rm -rf lts-unsquashfs/boot/vmlinuz\nsudo rm -rf lts-unsquashfs/lib/firmware/\nsudo rm -rf lts-unsquashfs/usr/lib/x86_64-linux-gnu/libwireshark.so*\nsudo rm -rf lts-unsquashfs/lib/modules/*amd64-vyos\n# Pack it up and import in docker\nsudo tar -C lts-unsquashfs -c . | sudo docker import - vyos:1.3.4 --change 'CMD [\"/sbin/init\"]'\n</code></pre> <pre><code>mkdir rolling-rootfs\nsudo mount -o loop vyos-rolling/build/vyos-1.4-rolling-*-amd64.iso rolling-rootfs\nmkdir rolling-unsquashfs\nsudo unsquashfs -f -d rolling-unsquashfs/ rolling-rootfs/live/filesystem.squashfs\n# Fix locale\nsudo sed -i 's/^LANG=.*$/LANG=C.UTF-8/' rolling-unsquashfs/etc/default/locale\n# Reducing the container size\nsudo rm -rf rolling-unsquashfs/boot/*.img\nsudo rm -rf rolling-unsquashfs/boot/*vyos*\nsudo rm -rf rolling-unsquashfs/boot/vmlinuz\nsudo rm -rf rolling-unsquashfs/lib/firmware/\nsudo rm -rf rolling-unsquashfs/usr/lib/x86_64-linux-gnu/libwireshark.so*\nsudo rm -rf rolling-unsquashfs/lib/modules/*amd64-vyos\n# Pack it up and import in docker\nexport BUILD=$(date \"+%y%m%d%H%M\")\nsudo tar -C rolling-unsquashfs -c . | sudo docker import - vyos:1.4-$BUILD --change 'CMD [\"/sbin/init\"]'\n</code></pre> <p>If everything went according to plan there should be two VyOS docker images: <pre><code>stimmerman@containerlab:~/vyos-builds$ docker image ls | grep vyos\nvyos                                     1.4-202309061459   13036fe69138   About a minute ago   1.16GB\nvyos                                     1.3.3              72ddbcdf7579   2 minutes ago        874MB\nvyos/vyos-build                          current            74a186038e1e   13 days ago          3.07GB\nvyos/vyos-build                          equuleus           b989e4dbc47a   2 months ago         4GB\n</code></pre></p>","tags":["containerlab","docker","vyos"]},{"location":"running-vyos-as-docker-container/#running-a-vyos-container","title":"Running a VyOS container","text":"<p>With the containers build we can spin up an instance to check if it's working.</p> Without persistent configWith persistent config <pre><code># Start the container\ndocker run -d --name vyos-lts --privileged -v /lib/modules:/lib/modules vyos:1.3.3\n# Login to the router\ndocker exec -ti vyos-lts su vyos\n</code></pre> <pre><code># Create volume to hold the configuration\ndocker volume create vyos-lts-config\n# Start the container\ndocker run -d --name vyos-lts --privileged -v /lib/modules:/lib/modules -v vyos-lts-config:/opt/vyatta/etc/config vyos:1.3.3\n# Login to the router\ndocker exec -ti vyos-lts su vyos\n</code></pre> <p>You should be greeted by a VyOS prompt like <code>vyos@vyos:/$</code> if all went well.</p> Enabling SSH Access <p>Exec into the container <pre><code>docker exec -ti vyos-lts su vyos\n</code></pre> Enable the SSH service in VyOS <pre><code>vyos@vyos:/$ conf\nvyos@vyos# set service ssh\nvyos@vyos# commit; save; exit\n</code></pre> Find out the IP address assigned to eth0 in my case 172.17.0.4 <pre><code>vyos@vyos:~$ show int\nCodes: S - State, L - Link, u - Up, D - Down, A - Admin Down\nInterface        IP Address                        S/L  Description\n---------        ----------                        ---  -----------\neth0             172.17.0.4/16                     u/u\nlo               127.0.0.1/8                       u/u\n</code></pre> You should be able to SSH into the router now like <code>ssh vyos@172.17.0.4</code> using the password <code>vyos</code></p> <ol> <li> <p>https://docs.google.com/document/d/1TUUVGLzetAX7_BIO6qtKDCC89j40eHa7bZrGiM5a3j8/\u00a0\u21a9</p> </li> <li> <p>https://forum.vyos.io/t/vyos-as-docker-container-journey/6128\u00a0\u21a9</p> </li> <li> <p>https://docs.vyos.io/en/latest/installation/virtual/docker.html\u00a0\u21a9</p> </li> </ol>","tags":["containerlab","docker","vyos"]},{"location":"howto-silence-apc-ups-alarm-sound-thats-attached-to-synology/","title":"Howto silence APC UPS alarm sound that's attached to Synology","text":"<p>I'm using an APC Back-UPS ES 700G at home to keep my NAS and NUC running and do a safe shutdown in case of power failure. It's attached with an USB cable to my Synology NAS running DSM 7.x so the NAS can check the status of the UPS and act on it.</p> <p>Unfortunately the battery of the UPS failed, causing it to make a loud alarm sound which can't be silenced on the UPS itself with a button. Here's how it can be silenced from the NAS.</p> <p>Note</p> <p>This post based on the post from Moshi Bin. I've adapted it to work with DSM 7.x and with the only goal to just silcence the beeper, the quickest way possible until the replacement battery comes.</p>","tags":["apc","ups","synology","dsm"]},{"location":"howto-silence-apc-ups-alarm-sound-thats-attached-to-synology/#nuts-network-ups-tools","title":"NUTS (Network UPS Tools)","text":"<p>DSM runs NUTS (Network UPS Tools) as tool to manage an attached UPS. The NUTS software is set up as client-server model and normally comes with a tool called <code>upscmd</code> which can be used to change settings for the UPS. On DSM this tool unfortunately has been left out by Synology. But we can still pretend to be a client to NUTS by using telnet and change the setting.</p>","tags":["apc","ups","synology","dsm"]},{"location":"howto-silence-apc-ups-alarm-sound-thats-attached-to-synology/#update-permissions","title":"Update permissions","text":"<p>Login to the NAS with your admin account and update the file containing the users and permissions in <code>/etc/ups/upsd.users</code> <pre><code>admin@NAS:~$ sudo vi /etc/ups/upsd.users\n</code></pre></p> <p>At the bottom you should see this config for the default <code>monuser</code>: <pre><code># MONITOR myups@localhost 1 upsmon pass master  (or slave)\n[monuser]\n        password = secret\n        upsmon master\n</code></pre></p> <p>Add the <code>actions</code> and <code>instcmds</code> lines as shown below:</p> <pre><code># MONITOR myups@localhost 1 upsmon pass master  (or slave)\n[monuser]\n        password = secret\n        upsmon master\n        actions = SET\n        instcmds = beeper.disable\n</code></pre> <p>Save the file, and reload the <code>upsd</code> service: <pre><code>admin@NAS:~$ sudo upsd -c reload\nNetwork UPS Tools upsd DSM7-2-1-NewModel-repack-64570-230831\nadmin@NAS:~$\n</code></pre></p>","tags":["apc","ups","synology","dsm"]},{"location":"howto-silence-apc-ups-alarm-sound-thats-attached-to-synology/#telnet-using-python","title":"Telnet using python","text":"<p>There's no telnet client available on DSM, we can use Python and the builtin <code>telnetlib</code> to do the same. Create a new file like <code>disable_ups_beep.py</code> <pre><code>admin@NAS:~$ vi disable_ups_beep.py\n</code></pre> And paste the this code <pre><code>#!/usr/bin/env python\nfrom telnetlib import Telnet\n\nwith Telnet(\"localhost\", 3493) as tn:\n    tn.write(b\"USERNAME monuser\\n\")\n    tn.read_until(b\"OK\")\n    tn.write(b\"PASSWORD secret\\n\")\n    tn.read_until(b\"OK\")\n    tn.write(b\"INSTCMD ups beeper.disable\\n\")\n    tn.read_until(b\"OK\")\n    tn.write(b\"LOGOUT\\n\")\n    print(tn.read_all())\n</code></pre> Execute the script and you should see a similar output like this (and finally the sound will stop): <pre><code>admin@NAS:~$ ./disable_ups_beep.py\nb'\\nOK Goodbye\\n'\nadmin@NAS:~$\n</code></pre></p>","tags":["apc","ups","synology","dsm"]},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2023/","title":"2023","text":""},{"location":"category/synology/","title":"Synology","text":""},{"location":"category/palo-alto/","title":"Palo Alto","text":""},{"location":"category/vmware/","title":"VMware","text":""},{"location":"category/cisco/","title":"Cisco","text":""},{"location":"category/asa/","title":"ASA","text":""},{"location":"category/ccnp/","title":"CCNP","text":""},{"location":"category/containerlab/","title":"Containerlab","text":""},{"location":"category/vyos/","title":"VyOS","text":""}]}